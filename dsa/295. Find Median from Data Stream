priority_queue<int>maxheap;
priority_queue <int, vector<int>, greater<int>>minheap;
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(!maxheap.empty()&&maxheap.top()<num)
        {
            minheap.push(num);
        }
        else maxheap.push(num);
    
        if(maxheap.size()>minheap.size()+1)
        {
            int topi=maxheap.top();
            maxheap.pop();
            minheap.push(topi);

        }
        if(minheap.size()>maxheap.size()+1)
         {
            int topi=minheap.top();
            minheap.pop();
            maxheap.push(topi);
         }
    }
    
    double findMedian() {
        if(minheap.size()==maxheap.size())
        {
            return  (maxheap.top()+minheap.top())/2.0;
        }
        else if(minheap.size()>maxheap.size())
        return minheap.top();
        else
        return maxheap.top();
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
